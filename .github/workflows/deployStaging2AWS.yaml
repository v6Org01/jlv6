name: deploy_staging_to_aws

on:
  workflow_call:
    inputs:
      VERSION:
        description: 'Application version'
        required: true
        type: string
      K8S_NAMESPACE_CERT:
        description: 'Namespace containing TLS cert secret'
        required: true
        type: string
      K8S_SECRET_CERT:
        description: 'TLS cert secret name'
        required: true
        type: string
      TF_CLOUD_ORGANIZATION:
        description: 'Terraform Cloud Organization'
        required: true
        type: string
    secrets:
      KUBECONFIG_PLUTO_CERT:
        required: true
      TF_API_TOKEN:
        required: true
      
jobs:

 # aws-import-cert:
 #   environment: production
 #   runs-on: self-hosted
 #   steps:
 #     - name: Install AWS CLI and Auth
 #       uses: v6Org01/.github/actions/install-cli-login-AWS
 #       with:
 #         AWS_REGION: us-east-1
 #         AWS_ROLE: "${{ secrets.AWS_ROLE }}"
 #     - name: Download cert files
 #       uses: actions/download-artifact@v4
 #       with:
 #         name: artifact-cert-jlv6
 #     - name: Import ACM cert
 #       run: |
 #         aws acm import-certificate --certificate file://cert.pem --certificate-chain file://fullchain.pem --private-key file://privkey.pem

  terraform-cloud-apply-run:
    runs-on: gha-runner-scale-set-amd64
    environment: staging
    env:
      TF_CLOUD_ORGANIZATION: ${{ inputs.TF_CLOUD_ORGANIZATION }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_LOG: DEBUG
      TF_MAX_TIMEOUT: "30m"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download cert files
        uses: actions/download-artifact@v4
        with:
          name: artifact-cert-jlv6
          path: ${{ vars.TF_CONFIG_DIRECTORY }}
      - name: Set Terraform Cloud variable
        run: |
          # Check if the variable already exists
          EXISTING_VAR_ID=$(curl -s \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/workspaces/${{ vars.TF_WORKSPACE_ID }}/vars" | \
            jq -r ".data[] | select(.attributes.key == \"APPLICATION_VERSION\") | .id")

          # Define the payload for updating or creating the variable
          payload=$(jq -n --arg key "APPLICATION_VERSION" --arg value "${{ inputs.VERSION }}" \
            '{
              data: {
                type: "vars",
                attributes: {
                  key: $key,
                  value: $value,
                  category: "terraform", # Use "terraform" for Terraform variables
                  hcl: false,      # Set to true if the variable is HCL code
                  sensitive: false # Set to true if the variable is sensitive
                }
              }
            }')

          if [ -n "$EXISTING_VAR_ID" ]; then
            # Update the existing variable
            curl -s -X PATCH \
              -H "Authorization: Bearer $TF_API_TOKEN" \
              -H "Content-Type: application/vnd.api+json" \
              -d "$payload" \
              "https://app.terraform.io/api/v2/vars/$EXISTING_VAR_ID"
            echo "Variable 'APPLICATION_VERSION' updated successfully."
          else
            # Create a new variable
            curl -s -X POST \
              -H "Authorization: Bearer $TF_API_TOKEN" \
              -H "Content-Type: application/vnd.api+json" \
              -d "$payload" \
              "https://app.terraform.io/api/v2/workspaces/${{ vars.TF_WORKSPACE_ID }}/vars"
            echo "Variable 'APPLICATION_VERSION' created successfully."
          fi 
      - name: Terraform Cloud - Apply
        uses: v6Org01/.github/actions/run-TerraformCloudApply@main
        with:
          DIRECTORY: ${{ vars.TF_CONFIG_DIRECTORY }}
          WORKSPACE: ${{ vars.TF_WORKSPACE }}
