name: deploy-shared-to-aws

on:
  workflow_call:
    inputs:
      K8S_NAMESPACE_CERT:
        description: 'Namespace containing TLS cert secret'
        required: true
        type: string
      K8S_SECRET_CERT:
        description: 'TLS cert secret name'
        required: true
        type: string
      OPENOBSERVE_AWS_CLOUDFRONT_01_URL:
        description: 'OpenObserve 01 url for CloudFront log ingestion'
        required: true
        type: string
      OPENOBSERVE_AWS_LAMBDA_01_URL:
        description: 'OpenObserve 01 url for Lambda log ingestion'
        required: true
        type: string
      OPENOBSERVE_AWS_LAMBDA_URLS_TO_MONITOR:
        description: 'URLs to monitor in Lambda function'
        required: true
        type: string
      TF_CLOUD_ORGANIZATION:
        description: 'Terraform Cloud Organization'
        required: true
        type: string
      VERSION:
        description: 'Application version'
        required: true
        type: string
    secrets:
      CF_API_TOKEN:
        required: true
      CF_ZONE_ID:
        required: true
      KUBECONFIG_PLUTO_CERT:
        required: true
      OPENOBSERVE_AWS_01_USERNAME:
        required: true
      OPENOBSERVE_AWS_01_PASSWORD:
        required: true
      TF_API_TOKEN:
        required: true
    outputs:
      VERSION:
        description: 'Application version'
        value: ${{ jobs.forward-var-version.outputs.VERSION }}

jobs:

  get-jlv6-tls-cert-k8s-for-acm:
    runs-on: gha-runner-scale-set-arm64
    steps:
      - name: Generate cert files
        uses: v6Org01/.github/actions/generate-certFiles-for-k8s-secret@main
        with:
          NAMESPACE: ${{ inputs.K8S_NAMESPACE_CERT }}
          SECRET: ${{ inputs.K8S_SECRET_CERT }}
          KUBECONFIG: ${{ secrets.KUBECONFIG_PLUTO_CERT }}
      - name: Upload cert files
        uses: actions/upload-artifact@v4
        with:
          name: artifact-cert-jlv6
          path: |
            ./privkey.pem
            ./fullchain.pem
            ./cert.pem
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  tf-shared-apply-run:
    runs-on: gha-runner-scale-set-amd64
    environment: shared
    needs: get-jlv6-tls-cert-k8s-for-acm
    env:
      TF_CLOUD_ORGANIZATION: ${{ inputs.TF_CLOUD_ORGANIZATION }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_LOG: DEBUG
      TF_MAX_TIMEOUT: "30m"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download cert files
        uses: actions/download-artifact@v4
        with:
          name: artifact-cert-jlv6
          path: ${{ vars.TF_CONFIG_DIRECTORY }}
      - name: Transform lambda-viewerReq-Bots-Logs.mjs
        run : |
          sed -i \
            -e "s|PLACEHOLDER_URL|${{ inputs.OPENOBSERVE_AWS_CLOUDFRONT_01_URL }}|g" \
            -e "s|PLACEHOLDER_USERNAME|${{ secrets.OPENOBSERVE_AWS_01_USERNAME }}|g" \
            -e "s|PLACEHOLDER_PASSWORD|${{ secrets.OPENOBSERVE_AWS_01_PASSWORD }}|g" \
            "${{ vars.TF_CONFIG_DIRECTORY }}/lambda-viewerReq-Bots-OpenObserve.mjs"
      - name: Transform lambda-httpCheck-OpenObserve.mjs
        run: |
          sed -i \
            -e 's|PLACEHOLDER_URLS_TO_MONITOR|'"${{ inputs.OPENOBSERVE_AWS_LAMBDA_URLS_TO_MONITOR }}"'|g' \
            -e "s|PLACEHOLDER_URL|${{ inputs.OPENOBSERVE_AWS_LAMBDA_01_URL }}|g" \
            -e "s|PLACEHOLDER_USERNAME|${{ secrets.OPENOBSERVE_AWS_01_USERNAME }}|g" \
            -e "s|PLACEHOLDER_PASSWORD|${{ secrets.OPENOBSERVE_AWS_01_PASSWORD }}|g" \
            "${{ vars.TF_CONFIG_DIRECTORY }}/lambda-httpCheck-OpenObserve.mjs"
      - name: Terraform Cloud - Apply
        uses: v6Org01/.github/actions/run-TerraformCloud-Apply@main
        id: tf-apply
        with:
          DIRECTORY: ${{ vars.TF_CONFIG_DIRECTORY }}
          WORKSPACE: ${{ vars.TF_WORKSPACE }}

  forward-var-version:
    runs-on: gha-runner-scale-set-arm64
    outputs:
      VERSION: ${{ steps.set-output-version.outputs.VERSION }}
    steps:
      - name: Set output VERSION
        id: set-output-version
        run: |
          echo "VERSION=${{ inputs.VERSION }}" >> $GITHUB_OUTPUT