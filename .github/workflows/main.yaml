name: main

on:
  push:
    branches: ["main"]
    paths: ["public/**"]

permissions:
  id-token: write
  contents: read
 
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:

  init:
    runs-on: gha-runner-scale-set-arm64
    outputs:
      BUILD_IMAGE: ${{ steps.check-commit.outputs.BUILD_IMAGE }}
      DEPLOY_AWS: ${{ steps.check-commit.outputs.DEPLOY_AWS }}
      DEPLOY_K8S: ${{ steps.check-commit.outputs.DEPLOY_K8S }}
      VERSION: ${{ steps.check-commit.outputs.VERSION }}
    steps:
      - name: Check commit message
        id: check-commit
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            echo "VERSION=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT

            # Define actions
            echo "CREATE_GIT_TAG=true" >> $GITHUB_ENV
            echo "CREATE_TFC_VAR=true" >> $GITHUB_ENV

          else
            echo "CREATE_GIT_TAG=false" >> $GITHUB_ENV
            echo "CREATE_TFC_VAR=false" >> $GITHUB_ENV
          fi

          if echo "${{ github.event.head_commit.message }}" | grep -q -E -- "--skip-build|-sb"; then
            echo "BUILD_IMAGE=false" >> $GITHUB_OUTPUT
          else
            echo "BUILD_IMAGE=true" >> $GITHUB_OUTPUT
          fi

          if echo "${{ github.event.head_commit.message }}" | grep -q -E -- "--skip-deploy-aws|-sa"; then
            echo "DEPLOY_AWS=false" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_AWS=true" >> $GITHUB_OUTPUT
          fi

          if echo "${{ github.event.head_commit.message }}" | grep -q -E -- "--skip-deploy-k8s|-sk"; then
            echo "DEPLOY_K8S=false" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_K8S=true" >> $GITHUB_OUTPUT
          fi
      - name: Debug
        run: |
          echo "COMMIT_MSG: ${{ github.event.head_commit.message }}"
          echo "CREATE_GIT_TAG: ${{ env.CREATE_GIT_TAG }}"
          echo "CREATE_TFC_VAR: ${{ env.CREATE_TFC_VAR }}"
          echo "BUILD_IMAGE: ${{ steps.check-commit.outputs.BUILD_IMAGE }}"
          echo "DEPLOY_AWS: ${{ steps.check-commit.outputs.DEPLOY_AWS }}"
          echo "DEPLOY_K8S: ${{ steps.check-commit.outputs.DEPLOY_K8S }}"
      - name: Update git tag
        if: ${{ env.CREATE_GIT_TAG == 'true' }}
        uses: v6Org01/.github/actions/update-gitTag@main
        with:
          DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          TAG_VALUE: ${{ steps.check-commit.outputs.VERSION }}
      - name: Update Terraform Cloud var
        if: ${{ env.CREATE_TFC_VAR == 'true' }}
        uses: v6Org01/.github/actions/update-TerraformCloud-SetVariable@main
        with:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
          VAR_CATEGORY: terraform
          VAR_SENSITIVITY: false
          VAR_NAME: VERSION
          VAR_SET_NAME: APPLICATION
          VAR_VALUE: ${{ steps.check-commit.outputs.VERSION }}
        
  build-push-image:
    if: >
      !failure() && 
      !cancelled() &&
      needs.init.outputs.BUILD_IMAGE == 'true'
    needs: init
    uses: v6Org01/.github/.github/workflows/buildPushImage.yaml@main
    with:
      APPLICATION: ${{ vars.APPLICATION }}
      BUILD_ARGS: |
        REGISTRY=${{ vars.REGISTRY_PRIVATE_PULL }}
        JLV6_GID=${{ vars.JLV6_GID }}
        JLV6_GROUP=${{ vars.JLV6_GROUP }}
        JLV6_UID=${{ vars.JLV6_UID }}
        JLV6_USER=${{ vars.JLV6_USER }}
      PUSH_TO_PRIVATE: true
      PUSH_TO_PUBLIC: false
      REGISTRY_PRIVATE: ${{ vars.REGISTRY_PRIVATE }}
      REGISTRY_PRIVATE_PULL: ${{ vars.REGISTRY_PRIVATE_PULL }}
      VERSION: ${{ needs.init.outputs.VERSION }}
    secrets:
      REGISTRY_PRIVATE_USER: ${{ secrets.REGISTRY_PRIVATE_USER01 }}
      REGISTRY_PRIVATE_PASSWD: "${{ secrets.REGISTRY_PRIVATE_USER01_PASSWD }}"

  deploy-to-aws-shared:
    if: >
      !failure() &&
      !cancelled() &&
      needs.init.outputs.DEPLOY_AWS == 'true'
    needs: init
    uses: v6Org01/jlv6/.github/workflows/deployShared2AWS.yaml@main
    with:
      K8S_NAMESPACE_CERT: ${{ vars.K8S_NAMESPACE_CERT }}
      K8S_SECRET_CERT: ${{ vars.K8S_SECRET_CERT }}
      TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
      VERSION: ${{ needs.init.outputs.VERSION }}
    secrets:
      KUBECONFIG_PLUTO_CERT: ${{ secrets.KUBECONFIG_PLUTO_CERT }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  deploy-to-aws-staging:
    if: >
      !failure() &&
      !cancelled() &&
      needs.init.outputs.DEPLOY_AWS == 'true'
    needs: deploy-to-aws-shared
    uses: v6Org01/jlv6/.github/workflows/deployStaging2AWS.yaml@main
    with:
      TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
      VERSION: ${{ needs.deploy-to-aws-shared.outputs.VERSION }}
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  # deploy-to-aws-production:
  #   if: ${{ !failure() && needs.init.outputs.DEPLOY_AWS == 'true' }}
  #   environment: production
  #   needs: deploy-to-aws-staging
  #   uses: v6Org01/jlv6/.github/workflows/deployProduction2AWS.yaml@main
  #     TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
  #   secrets:
  #     TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  deploy-to-k8s-staging:
    if: >
      !failure() &&
      !cancelled() &&
      needs.init.outputs.DEPLOY_K8S == 'true'
    needs: build-push-image
    uses: v6Org01/jlv6/.github/workflows/deployStaging2K8S.yaml@main
    with:
      VERSION: ${{ needs.init.outputs.VERSION }}
    secrets:
      DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
      KUBECONFIG_PLUTO_STAGING: ${{ secrets.KUBECONFIG_PLUTO_STAGING }}

  deploy-to-k8s-production:
    if: >
      !failure() &&
      !cancelled() &&
      needs.init.outputs.DEPLOY_K8S == 'true'
    needs: deploy-to-k8s-staging
    uses: v6Org01/jlv6/.github/workflows/deployProduction2K8S.yaml@main
    with:
      VERSION: ${{ needs.deploy-to-k8s-staging.outputs.VERSION }}
    secrets:
      DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
      KUBECONFIG_PLUTO_PROD: ${{ secrets.KUBECONFIG_PLUTO_PROD }}